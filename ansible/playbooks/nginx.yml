- hosts: "nginx:&{{ env_name }}"
  gather_facts: yes
  become: true
  collections:
    - nginxinc.nginx_core
  tasks:
  - name: Install nginx
    include_role:
      name: nginxinc.nginx
  - name: Check is server available
    uri:
      url: "http://{{ inventory_hostname }}"
      return_content: yes
    register: uri_result
    failed_when: "'Connection refused' in uri_result.msg or \
                  'Connection reset by peer' in uri_result.msg or \
                  'Connection timed out' in uri_result.msg or \
                  'Name or service not known' in uri_result.msg"

  - name: Create webroot dir
    file:
      path: /var/www/{{ inventory_hostname }}
      state: directory
      mode: '0755'
      owner: nginx
      group: nginx

  - name: Config ssl for nginx
    block:
    - name: Config nginx for letsencrypt checking
      include_role:
        name: nginxinc.nginx_config
      vars:
        nginx_config_main_template:
          - template_file: nginx.conf.j2
            deployment_location: /etc/nginx/nginx.conf
            backup: true
            config:
              user: nginx
              worker_processes: 1
              error_log:
                - path: /var/log/nginx/error.log
                  level: error
              pid: /var/run/nginx.pid
              events:
                worker_connections: 1024
              http:
                include:
                  - /etc/nginx/mime.types
                  - /etc/nginx/conf.d/*.conf
                default_type: application/octet-stream
                log_format:
                  - name: main
                    pattern: '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"'
                access_log:
                  - path: /var/log/nginx/access.log
                    format: main
                sendfile: 'on'
                tcp_nopush: 'on'
                keepalive_timeout: 65
                gzip: 'on'
        nginx_config_http_template:
          - template_file: http/default.conf.j2
            deployment_location: /etc/nginx/conf.d/{{ inventory_hostname }}.conf
            backup: true
            config:
              servers:
                - core:
                    listen:
                      - port: 80
                    server_name: "{{ inventory_hostname }}"
                    log:
                      access:
                        - path: /var/log/nginx/{{ inventory_hostname }}.log
                  locations:
                    - location: /
                      core:
                        root: /var/www/{{ inventory_hostname }}
                        index: index.html
    - name: Install letsencrypt
      include_role:
        name: systemli.letsencrypt
      vars:
        letsencrypt_opts_extra: "--register-unsafely-without-email"
        letsencrypt_directory: "/etc/letsencrypt/{{ inventory_hostname }}"
        letsencrypt_cert:
          challenge: http
          name: "{{ inventory_hostname }}"
          domains:
            - "{{ inventory_hostname }}"
          services:
            - nginx
          webroot_path: "/var/www/{{ inventory_hostname }}"
          http_auth: nginx
    when: "'CERTIFICATE_VERIFY_FAILED' in uri_result.msg or \
            'http://'+inventory_hostname == uri_result.url"

  - name: Config nginx
    include_role:
      name: nginxinc.nginx_config
    vars:
      nginx_config_main_template:
        - template_file: nginx.conf.j2
          deployment_location: /etc/nginx/nginx.conf
          backup: true
          config:
            user: nginx
            worker_processes: 1
            error_log:
              - path: /var/log/nginx/error.log
                level: error
            pid: /var/run/nginx.pid
            events:
              worker_connections: 1024
            http:
              include:
                - /etc/nginx/mime.types
                - /etc/nginx/conf.d/*.conf
              default_type: application/octet-stream
              log_format:
                - name: main
                  pattern: '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"'
              access_log:
                - path: /var/log/nginx/access.log
                  format: main
              sendfile: 'on'
              tcp_nopush: 'on'
              keepalive_timeout: 65
              gzip: 'on'
      nginx_config_http_template:
        - template_file: http/default.conf.j2
          deployment_location: /etc/nginx/conf.d/default.conf
          backup: true
          config:
            servers:
              - core:
                  listen:
                    - port: 80
                rewrite:
                  return:
                    code: 301
                    url: https://$host$request_uri
        - template_file: http/default.conf.j2
          deployment_location: /etc/nginx/conf.d/{{ inventory_hostname }}.conf
          backup: true
          config:
            servers:
              - core:
                  listen:
                    - port: 443
                      ssl: true
                  server_name: "{{ inventory_hostname }}"
                  error_page:
                    - code:
                        - 500
                        - 502
                        - 503
                        - 504
                      uri: /50x.html
                log:
                  access:
                    - path: /var/log/nginx/{{ inventory_hostname }}.log
                ssl:
                  certificate: /etc/letsencrypt/{{ inventory_hostname }}/live/fullchain.pem
                  certificate_key: /etc/letsencrypt/{{ inventory_hostname }}/live/privkey.pem
                locations:
                  - location: /50x.html
                    core:
                      root: /usr/share/nginx/html
                  - location: /
                    core:
                      root: /var/www/{{ inventory_hostname }}
                      index: index.html
#        - template_file: http/default.conf.j2
#          deployment_location: /etc/nginx/conf.d/{{ inventory_hostname }}-app.conf
#          backup: true
#          config:
#            servers:
#              - core:
#                  listen:
#                    - port: 8443
#                      ssl: true
#                  server_name: "{{ inventory_hostname }}"
#                log:
#                  access:
#                    - path: /var/log/nginx/{{ inventory_hostname }}.log
#                ssl:
#                  certificate: /etc/letsencrypt/live/{{ inventory_hostname }}/fullchain.pem
#                  certificate_key: /etc/letsencrypt/live/{{ inventory_hostname }}/privkey.pem
#                locations:
#                  - location: /api
#                    proxy:
#                      pass: http://127.0.0.1:{{ api_listen_docker_port }}
#                      set_header:
#                        - field: Host
#                          value: $host
#                        - field: X-Real-IP
#                          value: $remote_addr
