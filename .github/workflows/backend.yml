name: Docker-compose prepare host for backend

on:
  pull_request:
    branches:
      - "test"
      - "main"
    paths:
      - 'ansible/inventory/backend.yml'
      - 'ansible/playbooks/backend.yml'
      - 'ansible/roles/requirements_backend.yml'
      - '.github/workflows/backend.yml'
      - 'ansible/inventory/group_vars/backend.yml'
      - 'ansible/inventory/group_vars/all.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  env_name: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'test' && 'test' || github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main' && 'prod' || github.event.client_payload.env == 'test' && 'test' || github.event.client_payload.env == 'prod' && 'prod' }}
  package_name: ${{ github.event.client_payload.package_name || 'hello-world' }}
  test_hello-world: 'test'
  postgress_hello_world_password: 'test_from_env'

jobs:
  backend-prepare-hosts:
    #todo вообще плохая идея катить по созданию ПРа, но пока так
    #в идеале катить только после ревью в общем подумать как должен выглдяеть идеальный процесс
    environment: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'test' && 'test' || github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main' && 'prod' || github.event.client_payload.env == 'test' && 'test' || github.event.client_payload.env == 'prod' && 'prod' }}
    runs-on: ubuntu-20.04
    permissions: write-all
    concurrency: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'test' && 'test' || github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main' && 'prod' || github.event.client_payload.env == 'test' && 'test' || github.event.client_payload.env == 'prod' && 'prod' }}

    steps:
      - uses: hmarr/debug-action@v2

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Replace character in package name var
        id: replace_character
        run: |
          echo "package_name=$(echo ${{ env.package_name }} | sed s/-/_/g)" >> $GITHUB_OUTPUT

#      - name: Debug var
#        run: |
#          echo "test var ${{ steps.replace_character.outputs.package_name }}"

      - name: Generate password for db
        id: generate_password
        run: |
          echo "::add-mask::postgress_app_password=$(openssl rand -base64 32)"
        if: env[format('POSTGRES_{0}_PASSWORD', steps.replace_character.outputs.package_name )] == ''

#      - name: Debug var
#        run: |
#          echo "test var ${{ secrets[format('test_{0}', steps.replace_character.outputs.package_name )] }}"
#        if: env[format('test_{0}', steps.replace_character.package_name )] == 'test'
#
#      - name: Add secret to github
#        run: |
#          gh secret set POSTGRES_${{ github.event.client_payload.package_name }}_PASSWORD \
#          -b ${{ steps.generate_password.outputs.POSTGRES_app_PASSWORD }}
#          -e ${{ env.env_name }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        if: ${{ secrets[format('POSTGRES_{0}_PASSWORD', github.event.client_payload.package_name )] }} == ''
#
#      - name: Prepare backend hosts in docker-compose
#        #todo Вообще стоит наверное сделать после ревью ПРа - молекулу + чекмод + дифф + линтеры,
#        #если есть изменения, то запускаем уже раскатку конфига
#        run: |
#          ansible-galaxy install -r ansible/roles/requirements_backend.yml
#          eval "$(ssh-agent -s)"
#          echo -n ${{ secrets.DEPLOY_SSH_KEY }} | base64 -d | ssh-add -
#          ansible-playbook --user ${{ secrets.DEPLOY_SSH_USER }} -i ansible/inventory \
#          ansible/playbooks/backend.yml \
#          --limit ${{ env.env_name }} \
#          --extra-vars "\
#          ansible_sudo_pass=\"${{ secrets.DEPLOY_USER_PASSWORD }}\"
#          ansible_port=\"${{ secrets.DEPLOY_SSH_PORT }}\"
#          env_name=\"${{ env.env_name }}\"
#          POSTGRES_PASSWORD=\"${{ secrets.POSTGRES_SU_PASSWORD }}\"
#          package_name=\"${{ env.package_name }}\"
#          db_password=\"${{ secrets[format('POSTGRES_{0}_PASSWORD', github.event.client_payload.package_name )] }}\"